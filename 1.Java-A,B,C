import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        
        Integer[] array = {1, 2, 3, 4, 5, 6, 7};
        List<Integer> list = Arrays.asList(array);
        Collections.shuffle(list);
        System.out.println("Shuffled Array: " + Arrays.toString(list.toArray()));

     
        Scanner scanner = new Scanner(System.in);
        System.out.print("Part B: Enter a Roman numeral: ");
        String romanNumeralInput = scanner.nextLine().toUpperCase();
        try {
            int integerResult = romanToInteger(romanNumeralInput);
            System.out.println("The integer value of " + romanNumeralInput + " is: " + integerResult);
        } catch (IllegalArgumentException e) {
            System.out.println("Invalid Roman numeral input.");
        }

        
        System.out.print("Part C: Enter a sentence: ");
        String sentenceInput = scanner.nextLine();
        if (isPangram(sentenceInput)) {
            System.out.println("The input is a pangram.");
        } else {
            System.out.println("The input is not a pangram.");
        }
    }

  
    private static int romanToInteger(String roman) {
        int result = 0;
        int prevValue = 0;

        for (int i = roman.length() - 1; i >= 0; i--) {
            char numeral = roman.charAt(i);
            int value = romanNumerals.get(numeral);

            if (value < prevValue) {
                result -= value;
            } else {
                result += value;
            }

            prevValue = value;
        }

        return result;
    }

 
    private static boolean isPangram(String sentence) {
        String lowercaseSentence = sentence.toLowerCase();
        for (char c = 'a'; c <= 'z'; c++) {
            if (lowercaseSentence.indexOf(c) == -1) {
                return false;
            }
        }
        return true;
    }

    
    private static final java.util.Map<Character, Integer> romanNumerals = java.util.Map.of(
            'I', 1,
            'V', 5,
            'X', 10,
            'L', 50,
            'C', 100,
            'D', 500,
            'M', 1000
    );
}
